%#####################################
%
%# NekROM class
%# v0.0.0
%
%# Ping-Hsuan Tsai
%# 2024-07-04
%
%#####################################

classdef nekrom
    % Class for NekROM
    properties
        mb % Total number of modes generated by NekROM
        ns % Number of snapshots
        aufull % Stiffness matrix of size (mb+1 x mb+1)
        bufull % Mass matrix of size (mb+1 x mb+1)
        cufull % Advection tensor of size (mb x mb+1 x mb+1)
        u0full % Initial condition of size (mb+1)
        ukfull % Snapshot projection matrix of size (mb+1 x ns)
        uas % Averaged velocity coefficients of the snapshots (mb+1)
        nb % Number of modes
        au0 % Stiffness matrix of size (nb+1 x nb+1)
        bu0 % Mass matrix of size (nb+1 x nb+1)
        cu  % Advection tensor of size (nb*(nb+1) x nb+1)
        u0 % Initial condition of size (nb+1)
        au % Stiffness matrix of size (nb x nb)
        bu % Mass matrix of size (nb x nb)
        uk % Snapshot projection matrix of size (nb+1 x ns)
        ukmin % Minimum value of uk for each row
        ukmax % Maximum value of uk for each row
    end
    
    methods
        % Constructor
        function obj = nekrom(path)
            if nargin == 0
                disp('Path is required');
                return;
            end
            obj = obj.load_nekrom_ops(path);
        end

        function obj = load_nekrom_ops(obj, path)
            % Load NekROM operators and vectors
            % : path: path to the NekROM operators and vectors
            % : returns obj: NekROM object with operators and vectors loaded

            fprintf('Loading NekROM operators and vectors under path: %s\n', path);
            % Load total number of modes generated by NekROM
            obj.mb = dlmread(fullfile(path + "nb"));
            tt = dlmread(path + "au");
            obj.aufull = reshape(dlmread(path + "au"), obj.mb+1, obj.mb+1); % Load stiffness matrix
            obj.bufull = reshape(dlmread(path + "bu"), obj.mb+1, obj.mb+1); % Load mass matrix
            obj.cufull = reshape(dlmread(path + "cu"), obj.mb, obj.mb+1, obj.mb+1); % Load advection tensor
            obj.u0full = dlmread(path + "u0"); % Load initial condition
            obj.ukfull = reshape(dlmread(path + "uk"), obj.mb+1, []);
            obj.ns     = dlmread(path + "ns"); % load number of snapshots
            obj.uas    = dlmread(path + "uas"); % load averaged velocity coefficients of the snapshots
            if size(obj.ukfull, 2) ~= obj.ns
                error('Number of columns in obj.ukfull is not equal to ns.');
            end
            fprintf("Done loading NekROM operators ... \n");
        end

        function obj = get_N_dim_ops(obj, nb)
            %  Get N dimensional operators and vectors
            % : nb: number of modes
            % : returns obj: NekROM object with N dimensional operators and vectors

            fprintf('Get N dimensional operators and vectors\n');

            obj.nb = nb;
            index  = 1:obj.nb+1; % index including zeroth mode
            index1 = 1:obj.nb; % index for the first dimension of the advection operator

            obj.au0 = obj.aufull(index, index); % get stiffness matrix of size (nb+1 x nb+1) 
            obj.bu0 = obj.bufull(index, index); % get mass matrix of size (nb+1 x nb+1)
            obj.au = obj.au0(2:end, 2:end); % get stiffness matrix of size (nb x nb)
            obj.bu = obj.bu0(2:end, 2:end); % get mass matrix of size (nb x nb)
            obj.cu = obj.cufull(index1, index, index); % get advection tensor of size (nb x (nb+1) x nb+1)
            obj.cu = reshape(obj.cu, obj.nb*(obj.nb+1), obj.nb+1); % reshape advection tensor to size (nb*(nb+1) x nb+1)
            obj.u0 = obj.u0full(index); % get initial condition of size (nb+1)
            obj.uk = obj.ukfull(index, 1:obj.ns); % get snapshot projection matrix of size (nb+1 x ns)
            obj.ukmin = min(obj.uk, [], 2); % get minimum value of uk for each row
            obj.ukmax = max(obj.uk, [], 2); % get maximum value of uk for each row
        end

    end
end
