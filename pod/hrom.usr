c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=1-y*y
      uy   = 0
      uz   = 0
      temp = 0
      pa   = 0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
    
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      return
      end
c----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
c     NOTE ::: This is not guaranteed to be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      e = gllel(eg)

      ux=1-y*y
      uy=0.0
      uz=0.0
      temp=0.0
      pa  =0.0

      flux=1.

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'  
      include 'TOTAL' 
      include 'POD'

      if (istep.eq.0) then
         call my_pod4
      else
c        do ad_step=1,ad_nsteps
            call rom_step
c        enddo
c        call exitt0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine opadd3 (a1,a2,a3,b1,b2,b3,c1,c2,c3)
      include 'SIZE'
      real a1(1),a2(1),a3(1),b1(1),b2(1),b3(1)
      real c1(1),c2(1),c3(1)
      ntot1=lx1*ly1*lz1*nelv
      call add2(a1,b1,c1,ntot1)
      call add2(a2,b2,c2,ntot1)
      if (ldim.eq.3) call add2(a3,b3,c3,ntot1)
      return
      end
c-----------------------------------------------------------------------
      subroutine get_saved_fields(usave,vsave,wsave,nsave,u0)

c     This routine reads files specificed in file.list

      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'

      parameter (lt=lx1*ly1*lz1*lelt)
      real usave(lt,nsave),vsave(lt,nsave),wsave(lt,nsave)
      real u0(lt,3) ! Initial condtion


      ierr = 0
      if (nid.eq.0) open(77,file='file.list',status='old',err=199)
      ierr = iglmax(ierr,1)
      if (ierr.gt.0) goto 199
      n = lx1*ly1*lz1*nelt
      n2= lx2*ly2*lz2*nelt

      icount = 0
      do ipass=1,nsave

         call blank(initc,127)
         initc(1) = 'done '
         if (nid.eq.0) read(77,127,end=998) initc(1)
  998    call bcast(initc,127)
  127    format(a127)

         if (indx1(initc,'done ',5).eq.0) then ! We're not done
            nfiles = 1
            call restart(nfiles)  ! Note -- time is reset.

!           Usave = U_snapshot - U_stokes:

            call opsub3 (usave(1,ipass),vsave(1,ipass),wsave(1,ipass)
     $                  ,vx,vy,vz,u0(1,1),u0(1,2),u0(1,3))

            icount = icount+1
         else
            goto 999
         endif

      enddo

  999 continue  ! clean up averages
      if (nid.eq.0) close(77)

      nsave = icount ! Actual number of files read

      return

  199 continue ! exception handle for file not found
      ierr = 1
      if (nid.eq.0) ierr = iglmax(ierr,1)
      call exitti('Auto averager did not find list file.$',ierr)

      return
      end
c-----------------------------------------------------------------------
      subroutine my_pod4

      include 'SIZE'  
      include 'TOTAL' 
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)

      real usave(lt,ms),vsave(lt,ms),wsave(lt,ms)
      real uu(ms,ms)
      real uw(lt),vw(lt),ww(lt),h1(lt),h2(lt)
      real u0(lt,3)
      real u0r(ms)

      real evec(ms,nb)

      character(len=10) fname

      n  = lx1*ly1*lz1*nelt
      ns = ms

      ifield = 1

      call rzero(vz,n)
      call rzero(wb,n)

      call opcopy   (u0(1,1),u0(1,2),u0(1,3),vx,vy,vz)
      call opcopy   (ub(1,0),vb(1,0),wb(1,0),vx,vy,vz)

      call get_saved_fields(usave,vsave,wsave,ns,u0)

      nvecs = nb
      if (nid.eq.0) then
         open (unit=12,file='evectors.dat')
         read(12,*) (evec(k,1),k=1,ns*nvecs)
      endif
      len = wdsize*ns*nvecs ! broadcast array of length len bytes
      call bcast (evec,len)

      ONE = 1.
      ZERO= 0.

      ! ub, vb, wb, are the modes
      call dgemm( 'N','N',n,nb,ms,ONE,usave,lt,evec,ms,ZERO,ub(1,1),lt)
      call dgemm( 'N','N',n,nb,ms,ONE,vsave,lt,evec,ms,ZERO,vb(1,1),lt)
      if (ldim.eq.3)
     $call dgemm( 'N','N',n,nb,ms,ONE,wsave,lt,evec,ms,ZERO,wb(1,1),lt)

      do i=0,nb
         call outpost(ub(1,i),vb(1,i),wb(1,i),pr,t,'   ')
         call outmatl(ub(1,i),vb(1,i),wb(1,i),i)
      enddo

      call gfldr('chan20.f01540')

      call makec
      call get_a_b
      call makeic

      call rom_setup

      ifflow = .false.

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_setup

      include 'SIZE'
      include 'TOTAL'
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)

c     Matrices and vectors for advance
      real helm(1:nb,1:nb), rhs(1:nb)
      real tmp(0:nb),tmat(nb,nb+1)
      real coef(1:nb)

c     Working arrays for LU 
      integer IR(nb),ICC(nb)

      time = 0.

      do i=1,nb
         call copy(a(1,i),a0(1,i),nb)
         call copy(b(1,i),b0(1,i),nb)
      enddo

      do i=0,nb
      do j=0,nb
         call copy(c(1,j,i),c0(1,j,i),nb)
      enddo
      enddo

      n  = lx1*ly1*lz1*nelt

      call rzero(u,(nb+1)*3)
      u(0,2) = 1.
      u(0,3) = 1.
      u(0,1) = 1.
      call copy(u,ic,nb+1)

c     do j=1,3
c     do i=0,nb
c        write (6,*) j,i, u(i,j)
c     enddo
c     enddo

c     call exitt0

      ad_nsteps = nsteps
      ad_iostep = iostep

      ad_dt = dt
      ad_re = 1/param(2)

      ! BDFk/EXTk coefficients ( will change to BD inside Nek)
      call compute_BDF_coef(ad_alpha,ad_beta) 

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_step

      include 'SIZE'
      include 'TOTAL'
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)

c     Matrices and vectors for advance
      real helm(1:nb,1:nb), rhs(1:nb)
      real tmp(0:nb),tmat(nb,nb+1)
      real coef(1:nb)

c     Working arrays for LU 
      integer IR(nb),ICC(nb)

      n  = lx1*ly1*lz1*nelt

      count = min0(istep,3)

      call cmult2(helm,b,ad_beta(1,count)/ad_dt,nb*nb)
      call add2s2(helm,a,1/ad_re,nb*nb)

      ONE = 1.
      ZERO= 0.

      call mxm(u,nb+1,ad_beta(2,count),3,tmp,1)

      call dgemv( 'N',nb,nb,ONE,b,nb,tmp(1),1,ZERO,rhs,1)

      call cmult(rhs,-1/ad_dt,nb)
      call add2s2(rhs,a0(1,0),-1/ad_re,nb)

c     do i=1,nb
c        write (6,*) 'rhs',rhs(i)
c     enddo

      call copy(conv(1,3),conv(1,2),nb)
      call copy(conv(1,2),conv(1,1),nb)

      call mxm(c,nb*(nb+1),u,nb+1,tmat,1)
      call mxm(tmat,nb,u,nb+1,conv,1)
      call mxm(conv,nb,ad_alpha(1,count),3,tmp,1)

      call sub2(rhs,tmp,nb)

      call LU    (helm,nb,nb,IR,ICC)
      call SOLVE (rhs,helm,1,nb,nb,IR,ICC)

      call copy(u(1,3),u(1,2),nb)
      call copy(u(1,2),u(1,1),nb)
      call copy(u(1,1),rhs,nb)
      call copy(coef,rhs,nb)

      call opcopy(vx,vy,vz,ub,vb,wb)

      do j=1,nb
         call opadds(vx,vy,vz,ub(1,j),vb(1,j),wb(1,j),coef(j),n,2)
      enddo

c     if (mod(ad_step,ad_iostep).eq.0) then
c        call outpost(vx,vy,vz,pr,t,'rom')
c        write (6,*) 'rom outpost', ad_step,ad_iostep
c     endif

c     write(6,*) 'rom_step:',ad_step

c     do j=1,nb
c        write(6,*),coef(j)
c     enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine compute_BDF_coef(ad_alpha,ad_beta) 

      real ad_alpha(3,3), ad_beta(4,3)

      call rzero(ad_alpha,3*3)
      call rzero(ad_beta,3*4)

      ad_beta(1,1) = 1.
      ad_beta(2,1) = -1.

      ad_beta(1,2) = 1.5
      ad_beta(2,2) = -2
      ad_beta(3,2) = 0.5

      ad_beta(1,3) = 11./6
      ad_beta(2,3) = -3
      ad_beta(3,3) = 1.5
      ad_beta(4,3) = -1./3.

      ad_alpha(1,1)=1

      ad_alpha(1,2)=2
      ad_alpha(2,2)=-1

      ad_alpha(1,3)=3
      ad_alpha(2,3)=-3
      ad_alpha(3,3)=1

      return
      end 
c-----------------------------------------------------------------------
      subroutine outmatl(uu,v,w,k)

      include 'SIZE'  
      include 'TOTAL' 
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)
      real uu(lt),v(lt),w(lt)
      character*7 fname

      if (np.gt.1) call exitti('outmatl works for P=1 only!$',np)

      write(fname,22) k
   22 format('out.',i3.3)
      open(unit=33,file=fname)

      n = lx1*ly1*lz1*nelt
      do i=1,n
         write(33,33) xm1(i,1,1,1),ym1(i,1,1,1),uu(i),v(i)
   33    format(1p4e16.7)
      enddo
      close(33)

      return
      end
c-----------------------------------------------------------------------
      subroutine makec

      include 'SIZE'
      include 'TOTAL'
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)

      real cux(lt), cuy(lt), cuz(lt)

      common /scrk1/ t1(lt), binv(lt)

      call invers2(binv,bm1,lx1*ly1*lz1*nelv)
      call rone(binv,lx1*ly1*lz1*nelv)

      do k=0,nb
         call setcnv_c(ub(1,k),vb(1,k),wb(1,k))
         do j=0,nb
            call setcnv_u(ub(1,j),vb(1,j),wb(1,j))
            call ccu(cux,cuy,cuz)
            do i=0,nb
               c0(i,j,k) = op_glsc2_wt(ub(1,i),vb(1,i),wb(1,i),
     $                                cux,cuy,cuz,binv)
            enddo
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine setcnv_c(cx,cy,cz)

      include 'SIZE'

      parameter (lt=lx1*ly1*lz1*lelt)
      parameter (ltd=lxd*lyd*lzd*lelt)

      common /convect/ c1v(ltd), c2v(ltd), c3v(ltd),
     $                 u1v(ltd), u2v(ltd), u3v(ltd)

      real cx(lt), cy(lt), cz(lt)

      call set_convect_new(c1v,c2v,c3v,cx,cy,cz)

      return
      end
c-----------------------------------------------------------------------
      subroutine setcnv_u(ux,uy,uz)

      include 'SIZE'

      parameter (lt=lx1*ly1*lz1*lelt)
      parameter (ltd=lxd*lyd*lzd*lelt)

      common /convect/ c1v(ltd), c2v(ltd), c3v(ltd),
     $                 u1v(ltd), u2v(ltd), u3v(ltd)

      real ux(lt), uy(lt), uz(lt)

      call intp_rstd_all(u1v,ux,nelv)
      call intp_rstd_all(u2v,uy,nelv)
      if (ldim.eq.3) call intp_rstd_all(u3v,uz,nelv)

      return
      end
c-----------------------------------------------------------------------
      subroutine ccu(cu1,cu2,cu3) ! compute C(c) * u set by setcnv

      include 'SIZE'

      parameter(lt=lx1*ly1*lz1*lelt)
      parameter(ltd=lxd*lyd*lzd*lelt)

      real cu1(lt), cu2(lt), cu3(lt)

      common /convect/ c1v(ltd), c2v(ltd), c3v(ltd),
     $                 u1v(ltd), u2v(ltd), u3v(ltd)

      call convect_new(cu1,u1v,.true.,c1v,c2v,c3v,.true.)
      call convect_new(cu2,u2v,.true.,c1v,c2v,c3v,.true.)
      if (ldim.eq.3)
     $ call convect_new(cu3,u3v,.true.,c1v,c2v,c3v,.true.)

      return
      end
c-----------------------------------------------------------------------
      subroutine intp_rstd_all(uf,u,nel)

      include 'SIZE'
      include 'INPUT'

      parameter (lxyz1=lx1*ly1*lz1)
      parameter (lxyzd=lxd*lyd*lzd)

      real uf(lxyzd,lelt), u(lxyz1,lelt)

      do i=1,nel
         call intp_rstd(uf(1,i),u(1,i),lx1,lxd,if3d,0) ! 0 --> forward
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine get_A_B

      include 'SIZE'
      include 'TOTAL'
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)

      common /scrvh/ h1(lt),h2(lt)
      common /scrns/ usave(lt),vsave(lt),wsave(lt)

      do j=0,nb
      do i=0,nb
         b0(i,j) = op_glsc2_wt(ub(1,i),vb(1,i),wb(1,i),
     $                         ub(1,j),vb(1,j),wb(1,j),bm1)
      enddo
      enddo

      n= lx1*ly1*lz1*nelt
      call rone (h1,n)
      call rzero(h2,n)

      do j=0,nb                  ! Form the A matrix for basis function
         call axhelm(usave,ub(1,j),h1,h2,1,1)
         call axhelm(vsave,vb(1,j),h1,h2,1,1)
         if (ldim.eq.3) call axhelm(wsave,wb(1,j),h1,h2,1,1)
         do i=0,nb
            a0(i,j) = glsc2(ub(1,i),usave,n)+glsc2(vb(1,i),vsave,n)
            if (ldim.eq.3) a0(i,j) = a0(i,j)+glsc2(wb(1,i),wsave,n)
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine h1prod(prod,u1,v1,w1,u2,v2,w2)

      include 'SIZE'

      parameter(lt=lx1*ly1*lz1*lelt)

      common /scrk1/ t1(lt), t2(lt), t3(lt)
      common /scrk2/ h1(lt), h2(lt)

      real u1(lt), v1(lt), w1(lt)
      real u2(lt), v2(lt), w2(lt)

      n = lx1*ly1*lz1*nelt

      call rone(h1,n)
      call rzero(h2,n)

      call axhelm(t1,u1,h1,h2,1,1)
      call axhelm(t2,v1,h1,h2,1,1)

      prod = glsc2(t1,u2,n) + glsc2(t2,v2,n)

      if (ldim.eq.3) then
         call axhelm(t3,w1,h1,h2,1,1)
         prod = prod + glsc2(t3,w2,n)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine makeic

      include 'SIZE'
      include 'SOLN'
      include 'MASS'
      include 'POD'

      parameter (lt=lx1*ly1*lz1*lelt)

      common /scrk1/ t1(lt),t2(lt),t3(lt)

      write (6,*) 'inside makeic'

      call opcopy(t1,t2,t3,vx,vy,vz)

      ic(0) = 1.

      call opsub2(t1,t2,t3,ub(1,0),vb(1,0),wb(1,0))

      do i=1,nb
         t4 = op_glsc2_wt(ub(1,i),vb(1,i),wb(1,i),t1,t2,t3,bm1)
         t5 = op_glsc2_wt(ub(1,i),vb(1,i),wb(1,i),
     $                    ub(1,i),vb(1,i),wb(1,i),bm1)
c        call h1prod(t4,ub(1,i),vb(1,i),wb(1,i),t1,t2,t3)
c        call h1prod(t5,ub(1,i),vb(1,i),wb(1,i),ub(1,i),vb(1,i),wb(1,i))
         ic(i) = t4 / t5
         write (6,*) 'find coef: ',i,t4,t5,ic(i)
      enddo

      do i=1,nb
         ic(1) = 0.
      enddo

      return
      end
c-----------------------------------------------------------------------
