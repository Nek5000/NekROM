c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      call rom_update

      call exitt0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=1.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=1.0
      uy=0.0
      uz=0.0
      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      integer e,f

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

      n=lx1*ly1*lz1*nelv

      do e=1,nelt
      do f=1,ldim*2
         if (cbc(f,e,1).eq.'v  ') then
            x = xm1(2,2,1,e)
            y = ym1(2,2,1,e)
            if (abs(atan2(y,x)).lt.pi*0.5) cbc(f,e,1)='O  '
         endif
      enddo
      enddo

      s=.5/pi

      do i=1,lx1*ly1*lz1*nelt
         x=xm1(i,1,1,1)
         y=ym1(i,1,1,1)
         sobj(i,1,1,1)=mod(atan2(y,x)*s+1.,1.)
      enddo

      call set_obj

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3

      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals

      include 'SIZE'
      include 'TOTAL'

      integer e,f

c     Define new objects

      nobj = 1
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F' ! 'F'
         hcode( 2,ii) = 'F' ! 'F'
         hcode( 3,ii) = 'F' ! 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj

      if (maxobj.lt.nobj) write(6,*) 'increase maxobj in SIZE'
      if (maxobj.lt.nobj) call exitt

      do e=1,nelv
      do f=1,2*ndim
         if (cbc(f,e,1).eq.'W  ') then
            iobj = 0
c           if (f.eq.1) iobj=1  ! lower wall
c           if (f.eq.3) iobj=2  ! upper wall
            iobj=1              ! cylinder wall
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               ieg = lglel(e)
               object(iobj,mem,1) = ieg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,ieg,e,nid,' OBJ'
    1          format(6i9,a4)
            endif
c
         endif
      enddo
      enddo
c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userchk

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userbases

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userfop

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userrhs

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      return
      end
c-----------------------------------------------------------------------
