c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      parameter (lt=lx1*ly1*lz1*lelt)

      common /snsl2/ el2, fl2
      common /uchk/ fd(ldim),px(lt),py(lt),pz(lt)

      character*127 fname

      call blank(fname,127)
      fname='snaps/cyl0.f00200'
      call restart_file(fname)

      n=lx1*ly1*lz1*nelt

      if (istep.eq.0) then
         time=0.
c        call set_obj  ! define objects for surface integrals
         call push_sol(vx,vy,vz,pr,t)
         return
      endif

      call calc_nuss

      call estimate_strouhal

      scale = 1.  ! Cd = F/(.5 rho U^2 ) = 2*F

      call torque_calc(scale,0.,.true.,.true.)

      nbavg=lb

c     call opcopy(ub,vb,wb,u0,v0,w0)
c     call copy(tb,t,n)

      call pop_sol(vx,vy,vz,pr,t)
      ifflow=.false.

      nsteps = 2500000
      iostep = 5

      call rom_update

c     call csinteg_test

      call exitt0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0.0
      flux=0.0
      if ((x*x+y*y).lt.1.0) temp=1.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      nc=2**ldim
      ncinv=1./nc

      eps=1.e-2
      xmino=-2.5
      xmaxo=17.
      ymino=-5.
      ymaxo=5.

      facleft=12.5/.8
      facright=8./1.
      factb=4./2.

      do ie=1,nelt
      do ic=1,nc
         x=xc(ic,ie)
         y=yc(ic,ie)
         if (x.lt.(xmino-eps)) then
            x=(x-xmino)*facleft+xmino
         endif
         if (x.gt.(xmaxo+eps)) then
            x=(x-xmaxo)*facright+xmaxo
         endif
         if (y.lt.(ymino-eps)) then
            y=(y-ymino)*factb+ymino
         endif
         if (y.gt.(ymaxo+eps)) then
            y=(y-ymaxo)*factb+ymaxo
         endif
         xc(ic,ie)=x
         yc(ic,ie)=y
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
c     include 'MOR'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

      call set_obj

      s=.5/pi

      iobj=1
      return

      memtot=nmember(iobj)
      do mem=1,memtot
         ieg=object(iobj,mem,1)
         ifc=object(iobj,mem,2)
         if (gllnid(ieg).eq.nid) then
            ie=gllel(ieg)
            call facind(kx1,kx2,ky1,ky2,kz1,kz2,lx1,ly1,lz1,ifc)
            ia=1
            do iz=kz1,kz2
            do iy=ky1,ky2
            do ix=kx1,kx2
               x=xm1(ix,iy,iz,ie)
               y=ym1(ix,iy,iz,ie)
               thetap=mod(atan2(y,x)+pi/8+2*pi,2*pi)
               if (thetap.lt.pi*.5) then
                  so=0.+.5*(1.+sin(thetap)-cos(thetap))
               else if (thetap.lt.pi) then
                  so=1.+.5*(1.-sin(thetap)-cos(thetap))
               else if (thetap.lt.pi*1.5) then
                  so=2.+.5*(1.-sin(thetap)+cos(thetap))
               else
                  so=3.+.5*(1.+sin(thetap)+cos(thetap))
               endif
c              sarc(ia,1,ifc,ie)=so*0.25
c              sarc(ia,1,ifc,ie)=mod(atan2(y,x)*s+1.,1.)
               ia=ia+1
            enddo
            enddo
            enddo
         endif
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine estimate_strouhal

      include 'SIZE'
      include 'TOTAL'

      real tlast,vlast,tcurr,vcurr,t0,t1
      save tlast,vlast,tcurr,vcurr,t0,t1
      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /

      integer e,eg,eg0,e0

      eg0 = 499          ! Identify element/processor in wake
      mid = gllnid(eg0)
      e0  = gllel (eg0)

      st  = 0

      if (nid.eq.mid) then

         tlast = tcurr
         vlast = vcurr

         tcurr = time
         vcurr = vy (1,ny1,1,e0)

         xcurr = xm1(1,ny1,1,e0)
         ycurr = ym1(1,ny1,1,e0)

         write(6,2) istep,time,vcurr,xcurr,ycurr
    2    format(i9,1p4e13.5,' vcurr')

         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
            t0  = t1
            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
            per = t1-t0
            if (per.gt.0) st = 1./per
         endif
      endif

      st = glmax(st,1)

      n  = nx1*ny1*nz1*nelv
      ux = glamax(vx,n)
      uy = glamax(vy,n)

      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
    1 format(i5,1p4e12.4,' Strouhal')

      return
      end
c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'

      integer e,f,eg

      nobj = 1
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F'
         hcode( 2,ii) = 'F'
         hcode( 3,ii) = 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj

      if (maxobj.lt.nobj) call exitti('increase maxobj in SIZE$',nobj)

      nxyz  = nx1*ny1*nz1
      nface = 2*ndim

      do e=1,nelv
      do f=1,nface
         if (cbc(f,e,1).eq.'W  ') then
            iobj  = 1
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               eg  = lglel(e)
               object(iobj,mem,1) = eg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,eg,e,nid,' OBJ'
c   1          format(6i9,a4)

            endif
         endif
      enddo
      enddo

c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine calc_nuss

      include 'SIZE'
      include 'TOTAL'

      common /myblock/ tx(lx1,ly1,lz1,lelt),
     $                 ty(lx1,ly1,lz1,lelt),
     $                 tz(lx1,ly1,lz1,lelt)

      integer e,f,eg

      lxyz  = lx1*ly1*lz1
      nface = 2*ldim

      call gradm1(tx,ty,tz,t)

      iobj=1

      a=0.
      s=0.

      do imem=1,nmember(iobj)
         ieg=object(iobj,imem,1)
         ifc=object(iobj,imem,2)
         ie=gllel(ieg)
         call facind(kx1,kx2,ky1,ky2,kz1,kz2,lx1,ly1,lz1,ifc)
         l=1

         do iz=kz1,kz2
         do iy=ky1,ky2
         do ix=kx1,kx2
            a=a+area(l,1,ifc,ie)
            s=s+area(l,1,ifc,ie)*(unx(l,1,ifc,ie)*tx(ix,iy,iz,ie)+
     $                            uny(l,1,ifc,ie)*ty(ix,iy,iz,ie)+
     $                            unz(l,1,ifc,ie)*tz(ix,iy,iz,ie))
            l=l+1
         enddo
         enddo
         enddo
      enddo

      s=glsum(s,1)
      a=glsum(a,1)

      if (nio.eq.0) write (6,*) istep,time,s/a,'nuss'

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userchk

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      ifrecon=.false.

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userbases ! set user-defined ROM basis

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userrhs(urhs) ! set right hand size for ROM evolution

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      real urhs(nb)

      if (ifield.eq.1) then
c        call cadd(urhs,1.0,nb)
      else if (ifield.eq.2) then
c        call cadd(urhs,1.0,nb)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine rom_userfop ! set forward operator for ROM evolution

      include 'SIZE'
      include 'TOTAL'
      include 'MOR'

      if (ifield.eq.1) then
c        call seth(hlm(1,1),au,bu,1./ad_re)
c        call invmat(hinv,hlu,hlm,ihlu,ihlu2,nb)
      else if (ifield.eq.2) then
c        call seth(hlm(1,2),at,bt,1./ad_pe)
c        call invmat(hinv,hlu(1,2),hlm(1,2),ihlu(1,2),ihlu2(1,2),nb)
      endif

c     call update_k(uk,ukp,tk,tkp)

      return
      end
c-----------------------------------------------------------------------
