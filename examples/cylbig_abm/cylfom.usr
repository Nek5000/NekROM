c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'
      include 'TOTAL'

      parameter (lt=lx1*ly1*lz1*lelt)

      common /snsl2/ el2, fl2
      common /uchk/ fd(ldim),px(lt),py(lt),pz(lt)

      real rk(lt,3)

      if (istep.eq.0) then
         time=0.
         call set_obj  ! define objects for surface integrals
      endif

      call calc_nuss

      call estimate_strouhal

      scale = 1.  ! Cd = F/(.5 rho U^2 ) = 2*F

      call torque_calc(scale,0.,.true.,.true.)

      call avg_all2

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0.0
      flux=0.0
      if ((x*x+y*y).lt.1.0) temp=1.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      nc=2**ldim
      ncinv=1./nc

      eps=1.e-2
      xmino=-2.5
      xmaxo=17.
      ymino=-5.
      ymaxo=5.

      facleft=12.5/.8
      facright=8./1.
      factb=4./2.

      do ie=1,nelt
      do ic=1,nc
         x=xc(ic,ie)
         y=yc(ic,ie)
         if (x.lt.(xmino-eps)) then
            x=(x-xmino)*facleft+xmino
         endif
         if (x.gt.(xmaxo+eps)) then
            x=(x-xmaxo)*facright+xmaxo
         endif
         if (y.lt.(ymino-eps)) then
            y=(y-ymino)*factb+ymino
         endif
         if (y.gt.(ymaxo+eps)) then
            y=(y-ymaxo)*factb+ymaxo
         endif
         xc(ic,ie)=x
         yc(ic,ie)=y
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

      s=.5/pi

      do i=1,lx1*ly1*lz1*nelt
         x=xm1(i,1,1,1)
         y=ym1(i,1,1,1)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine estimate_strouhal

      include 'SIZE'
      include 'TOTAL'

      real tlast,vlast,tcurr,vcurr,t0,t1
      save tlast,vlast,tcurr,vcurr,t0,t1
      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /

      integer e,eg,eg0,e0

      eg0 = 499          ! Identify element/processor in wake
      mid = gllnid(eg0)
      e0  = gllel (eg0)

      st  = 0

      if (nid.eq.mid) then

         tlast = tcurr
         vlast = vcurr

         tcurr = time
         vcurr = vy (1,ny1,1,e0)

         xcurr = xm1(1,ny1,1,e0)
         ycurr = ym1(1,ny1,1,e0)

         write(6,2) istep,time,vcurr,xcurr,ycurr
    2    format(i9,1p4e13.5,' vcurr')

         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
            t0  = t1
            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
            per = t1-t0
            if (per.gt.0) st = 1./per
         endif
      endif

      st = glmax(st,1)

      n  = nx1*ny1*nz1*nelv
      ux = glamax(vx,n)
      uy = glamax(vy,n)

      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
    1 format(i5,1p4e12.4,' Strouhal')

      return
      end
c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'

      integer e,f,eg

      nobj = 1
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F'
         hcode( 2,ii) = 'F'
         hcode( 3,ii) = 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj

      if (maxobj.lt.nobj) call exitti('increase maxobj in SIZE$',nobj)

      nxyz  = nx1*ny1*nz1
      nface = 2*ndim

      do e=1,nelv
      do f=1,nface
         if (cbc(f,e,1).eq.'W  ') then
            iobj  = 1
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               eg  = lglel(e)
               object(iobj,mem,1) = eg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,eg,e,nid,' OBJ'
c   1          format(6i9,a4)

            endif
         endif
      enddo
      enddo

c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine calc_nuss

      include 'SIZE'
      include 'TOTAL'

      common /myblock/ tx(lx1,ly1,lz1,lelt),
     $                 ty(lx1,ly1,lz1,lelt),
     $                 tz(lx1,ly1,lz1,lelt)

      integer e,f,eg

      lxyz  = lx1*ly1*lz1
      nface = 2*ldim

      call gradm1(tx,ty,tz,t)

      iobj=1

      a=0.
      s=0.

      do imem=1,nmember(iobj)
         ieg=object(iobj,imem,1)
         ifc=object(iobj,imem,2)
         ie=gllel(ieg)
         call facind(kx1,kx2,ky1,ky2,kz1,kz2,lx1,ly1,lz1,ifc)
         l=1

         do iz=kz1,kz2
         do iy=ky1,ky2
         do ix=kx1,kx2
            a=a+area(l,1,ifc,ie)
            s=s+area(l,1,ifc,ie)*(unx(l,1,ifc,ie)*tx(ix,iy,iz,ie)+
     $                            uny(l,1,ifc,ie)*ty(ix,iy,iz,ie)+
     $                            unz(l,1,ifc,ie)*tz(ix,iy,iz,ie))
            l=l+1
         enddo
         enddo
         enddo
      enddo

      s=glsum(s,1)
      a=glsum(a,1)

      if (nio.eq.0) write (6,*) istep,time,s/a,'nuss'

      return
      end
c-----------------------------------------------------------------------
      subroutine avg_all2
c
c     This routine computes running averages E(X),E(X^2),E(X*Y)
c     and outputs to avg*.fld*, rms*.fld*, and rm2*.fld* for all
c     fields.
c
c     E denotes the expected value operator and X,Y two
c     real valued random variables.
c
c     variances and covariances can be computed in a post-processing step:
c
c        var(X)   := E(X^X) - E(X)*E(X)
c        cov(X,Y) := E(X*Y) - E(X)*E(Y)
c
c     Note: The E-operator is linear, in the sense that the expected
c           value is given by E(X) = 1/N * sum[ E(X)_i ], where E(X)_i
c           is the expected value of the sub-ensemble i (i=1...N).
c
      include 'SIZE'
      include 'TOTAL'
      include 'AVG'
      parameter (lt=lx1*ly1*lz1*lelt)

      logical ifverbose
      integer icalld
      save    icalld
      data    icalld  /0/
      common /myavg2/ utms(lt),vtms(lt),wtms(lt)
     $              , usms(lt),vsms(lt),wsms(lt)

      if (ax1.ne.lx1 .or. ay1.ne.ly1 .or. az1.ne.lz1) then
         if(nid.eq.0) write(6,*)
     $     'ABORT: wrong size of ax1,ay1,az1 in avg_all(), check SIZE!'
         call exitt
      endif
      if (ax2.ne.lx2 .or. ay2.ne.ay2 .or. az2.ne.lz2) then
         if(nid.eq.0) write(6,*)
     $     'ABORT: wrong size of ax2,ay2,az2 in avg_all(), check SIZE!'
         call exitt
      endif

      ntot  = nx1*ny1*nz1*nelv
      ntott = nx1*ny1*nz1*nelt
      nto2  = nx2*ny2*nz2*nelv

      ! initialization
      if (icalld.eq.0) then
         icalld = icalld + 1
         atime  = 0.
         timel  = time

         call rzero(uavg,ntot)
         call rzero(vavg,ntot)
         call rzero(wavg,ntot)
         call rzero(pavg,nto2)
         do i = 1,ldimt
            call rzero(tavg(1,1,1,1,i),ntott)
         enddo

         call rzero(urms,ntot)
         call rzero(vrms,ntot)
         call rzero(wrms,ntot)
         call rzero(prms,nto2)
         do i = 1,ldimt
            call rzero(trms(1,1,1,1,i),ntott)
         enddo

         call rzero(vwms,ntott)
         call rzero(wums,ntott)
         call rzero(uvms,ntott)
         call rzero(utms,ntott)
         call rzero(vtms,ntott)
         call rzero(wtms,ntott)
         call rzero(usms,ntott)
         call rzero(vsms,ntott)
         call rzero(wsms,ntott)
      endif

      dtime = time  - timel
      atime = atime + dtime

      ! dump freq
      iastep = param(68)
      if  (iastep.eq.0) iastep=param(15)   ! same as iostep
      if  (iastep.eq.0) iastep=500

      ifverbose=.false.
      if (istep.le.10) ifverbose=.true.
      if  (mod(istep,iastep).eq.0) ifverbose=.true.

      if (atime.ne.0..and.dtime.ne.0.) then
         if(nio.eq.0) write(6,*) 'Compute statistics ...'
         beta  = dtime/atime
         alpha = 1.-beta
         ! compute averages E(X)
         call avg1    (uavg,vx,alpha,beta,ntot ,'um  ',ifverbose)
         call avg1    (vavg,vy,alpha,beta,ntot ,'vm  ',ifverbose)
         call avg1    (wavg,vz,alpha,beta,ntot ,'wm  ',ifverbose)
         call avg1    (pavg,pr,alpha,beta,nto2 ,'prm ',ifverbose)
         call avg1    (tavg,t ,alpha,beta,ntott,'tm  ',ifverbose)
         do i = 2,ldimt
            call avg1 (tavg(1,1,1,1,i),t(1,1,1,1,i),alpha,beta,
     &                 ntott,'psav',ifverbose)
         enddo

         ! compute averages E(X^2)
         call avg2    (urms,vx,alpha,beta,ntot ,'ums ',ifverbose)
         call avg2    (vrms,vy,alpha,beta,ntot ,'vms ',ifverbose)
         call avg2    (wrms,vz,alpha,beta,ntot ,'wms ',ifverbose)
         call avg2    (prms,pr,alpha,beta,nto2 ,'prms',ifverbose)
         call avg2    (trms,t ,alpha,beta,ntott,'tms ',ifverbose)
         do i = 2,ldimt
            call avg2 (trms(1,1,1,1,i),t(1,1,1,1,i),alpha,beta,
     &                 ntott,'psms',ifverbose)
         enddo

         !! compute averages E(X*Y) (for now just for the velocities)
         call avg3    (uvms,vx,vy,alpha,beta,ntot,'uvm ',ifverbose)
         call avg3    (vwms,vy,vz,alpha,beta,ntot,'vwm ',ifverbose)
         call avg3    (wums,vz,vx,alpha,beta,ntot,'wum ',ifverbose)

         !! compute averages E(u*T)
         call avg3    (utms,vx,t,alpha,beta,ntot,'utm ',ifverbose)
         call avg3    (vtms,vy,t,alpha,beta,ntot,'vtm ',ifverbose)
         call avg3    (wtms,vz,t,alpha,beta,ntot,'wtm ',ifverbose)

         !! compute averages E(u*S)
         call avg3    (usms,vx,t(1,1,1,1,2),alpha,beta,ntot,
     &                 'usm ',ifverbose)
         call avg3    (vsms,vy,t(1,1,1,1,2),alpha,beta,ntot,
     &                 'vsm ',ifverbose)
         call avg3    (wsms,vz,t(1,1,1,1,2),alpha,beta,ntot,
     &                 'wsm ',ifverbose)

      endif
c
c-----------------------------------------------------------------------
      if ( (mod(istep,iastep).eq.0.and.istep.gt.1) .or.lastep.eq.1) then

         time_temp = time
         time      = atime   ! Output the duration of this avg

         call outpost2(uavg,vavg,wavg,pavg,tavg,ldimt,'avg')
         call outpost2(urms,vrms,wrms,prms,trms,ldimt,'rms')
         call outpost (uvms,vwms,wums,prms,trms,      'rm2')

         call outpost (utms,vtms,wtms,prms,trms,      'tmn')
         call outpost (usms,vsms,wsms,prms,trms(1,1,1,1,2),
     &                       'smn')
         atime = 0.
         time  = time_temp  ! Restore clock

      endif
c
      timel = time
c
      return
      end
c-----------------------------------------------------------------------
